{"version":3,"sources":["icons/index.js","icons/clear-day.svg","icons/clear-night.svg","icons/cloudy.svg","icons/partly-cloudy-day.svg","icons/partly-cloudy-night.svg","icons/rain.svg","icons/sleet.svg","icons/snow.svg","icons/wind.svg","InputScreen.js","CityScreen.js","WeatherScreen.js","Footer.js","LoadingScreen.js","App.js","index.js"],"names":["module","exports","require","InputScreen","props","className","type","value","onClick","onClickGeolocate","onClickCity","CityScreen","onSubmit","placeholder","onChange","class","WeatherScreen","dayNames","forecastList","weather","forecast","map","day","src","icon","alt","low","high","currentTemp","Footer","href","title","target","rel","LoadingScreen","requestWeatherData","location","callback","coords","xml","XMLHttpRequest","onreadystatechange","readyState","status","data","response","success","Math","round","currently","temperature","i","daily","length","datum","date","Date","setTime","time","getDay","newDay","Icons","temperatureLow","temperatureHigh","push","parseWeatherData","JSON","parse","responseText","open","stringify","send","App","navigator","geolocation","state","phase","handleClickGeolocate","bind","handleClickCity","handleCitySubmit","handleCityChange","this","setState","getCurrentPosition","position","lat","latitude","long","longitude","weatherData","e","cityName","preventDefault","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.2851c95f.chunk.js","sourcesContent":["module.exports = {\n  'clear-day': require('./clear-day.svg'),\n  'clear-night': require('./clear-night.svg'),\n  'cloudy': require('./cloudy.svg'),\n  'partly-cloudy-day': require('./partly-cloudy-day.svg'),\n  'partly-cloudy-night': require('./partly-cloudy-night.svg'),\n  'rain': require('./rain.svg'),\n  'sleet': require('./sleet.svg'),\n  'snow': require('./snow.svg'),\n  'wind': require('./wind.svg')\n};\n","module.exports = __webpack_public_path__ + \"static/media/clear-day.02f11d1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.3e4be6c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.5ef472e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-day.eee4f601.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-night.96cc1826.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.1006b328.svg\";","module.exports = __webpack_public_path__ + \"static/media/sleet.055defa0.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.e583d545.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.78a95530.svg\";","import React from 'react';\n\nconst InputScreen = (props) => {\n  return (\n    <div>\n      <h1 className=\"main-heading\">React Weather</h1>\n      <input\n        className=\"button primary\"\n        type=\"button\"\n        value=\"USE CURRENT LOCATION\"\n        onClick={props.onClickGeolocate}\n      />\n      <input\n        className=\"button\"\n        type=\"button\"\n        value=\"USE CITY NAME\"\n        onClick={props.onClickCity}\n      />\n    </div>\n  );\n}\n\nexport default InputScreen;\n","import React from 'react';\n\nconst CityScreen = (props) => {\n  return (\n    <div>\n      <h1>City Name</h1>\n      <form onSubmit={props.onSubmit}>\n        <input type=\"text\" placeholder=\"Start typing city...\" onChange={props.onChange} />\n        <input class=\"button primary\" type=\"submit\" value=\"GO\" />\n      </form>\n    </div>\n  );\n};\n\nexport default CityScreen;\n","import React from 'react';\n\nconst WeatherScreen = (props) => {\n  const dayNames = [\n    'Sun',\n    'Mon',\n    'Tue',\n    'Wed',\n    'Thu',\n    'Fri',\n    'Sat'\n  ];\n\n  const forecastList = props.weather.forecast.map(day => {\n    return (\n      <div className=\"forecast-list-item\">\n        <p>{dayNames[day.day]}</p>\n        <img src={day.icon} alt={day.icon} />\n        <p className=\"low-temp\">{day.low}</p>\n        <p className=\"high-temp\">{day.high}</p>\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <h1>Today</h1>\n      <img className=\"current-icon\" src={props.weather.forecast[0].icon} alt={props.weather.forecast[0].icon} />\n      <div className=\"current-temps-container\">\n        <p className=\"low-temp\">{props.weather.forecast[0].low}</p>\n        <p className=\"current-temp\">{props.weather.currentTemp}</p>\n        <p className=\"high-temp\">{props.weather.forecast[0].high}</p>\n      </div>\n      <div className=\"forecast-container\">\n        {forecastList}\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherScreen;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <a href=\"https://darksky.net/poweredby/\">Powered by Dark Sky</a>\n      <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\"                 title=\"Flaticon\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\"                 title=\"Creative Commons BY 3.0\" target=\"_blank\" rel=\"noopener noreferrer\">CC 3.0 BY</a></div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nconst LoadingScreen = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"loader\"></div>\n    </div>\n  );\n};\n\nexport default LoadingScreen;\n","import React from 'react';\nimport InputScreen from './InputScreen';\nimport CityScreen from './CityScreen';\nimport WeatherScreen from './WeatherScreen';\nimport Footer from './Footer';\nimport LoadingScreen from './LoadingScreen';\nimport Icons from './icons';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    // Advance to the city screen if geolocation is not available\n    if (navigator.geolocation) {\n      this.state = {\n        phase: 'input-screen'\n      }\n    }else{\n      this.state = {\n        phase: 'city-screen'\n      }\n    }\n\n    // Bind this to event handlers\n    this.handleClickGeolocate = this.handleClickGeolocate.bind(this);\n    this.handleClickCity = this.handleClickCity.bind(this);\n    this.handleCitySubmit = this.handleCitySubmit.bind(this);\n    this.handleCityChange = this.handleCityChange.bind(this);\n  }\n\n  handleClickGeolocate () {\n    this.setState({\n      phase: 'loading-screen'\n    });\n    navigator.geolocation.getCurrentPosition((position) => {\n      // Parse position stuff\n      const location = {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      };\n\n      requestWeatherData(location, (response) => {\n        // Check if response was successful\n        if (response.success) {\n          this.setState({\n            weatherData: response,\n            phase: 'weather-screen'\n          });\n        }\n      }, true);\n    });\n  }\n\n  handleClickCity () {\n    this.setState({\n      phase: 'city-screen'\n    });\n  }\n\n  handleCityChange (e) {\n    this.setState({\n      cityName: e.target.value\n    });\n  }\n\n  handleCitySubmit (e) {\n    e.preventDefault();\n\n    this.setState({\n      phase: 'loading-screen'\n    });\n\n    requestWeatherData(this.state.cityName, (response) => {\n      // Check if response was successful\n      if (response.success) {\n        this.setState({\n          weatherData: response,\n          phase: 'weather-screen'\n        });\n      }\n    }, false);\n  }\n\n  render () {\n    if (this.state.phase === 'input-screen') {\n      return (\n        <div className=\"weather-app\">\n          <InputScreen\n            onClickGeolocate={this.handleClickGeolocate}\n            onClickCity={this.handleClickCity}\n          />\n          <Footer />\n        </div>\n    );\n    }else if (this.state.phase === 'city-screen') {\n      return (\n        <div className=\"weather-app\">\n          <CityScreen\n            onChange={this.handleCityChange}\n            onSubmit={this.handleCitySubmit}\n          />\n          <Footer />\n        </div>\n      );\n    }else if (this.state.phase === 'weather-screen') {\n      return (\n        <div className=\"weather-app\">\n          <WeatherScreen weather={this.state.weatherData} />\n          <Footer />\n        </div>\n      );\n    }else{\n      return (\n        <LoadingScreen />\n      );\n    }\n  }\n}\n\n// Call this to parse the weather data into what we need\nfunction parseWeatherData (response) {\n  const data = {\n    success: true,\n    currentTemp: Math.round(response.currently.temperature),\n    forecast: []\n  }\n\n  for (let i = 0; i < response.daily.data.length; i++) {\n    const datum = response.daily.data[i];\n\n    const date = new Date();\n    date.setTime(datum.time * 1000);\n    const day = date.getDay();\n\n    const newDay = {\n      icon: Icons[datum.icon],\n      low: Math.round(datum.temperatureLow),\n      high: Math.round(datum.temperatureHigh),\n      day: day\n    }\n    data.forecast.push(newDay);\n  }\n\n  return data;\n}\n\n// Call this to request weather data from the backend\nfunction requestWeatherData (location, callback, coords) {\n  const xml = new XMLHttpRequest();\n  xml.onreadystatechange = () => {\n    if (xml.readyState === 4 && xml.status === 200) {\n      const data = parseWeatherData(JSON.parse(xml.responseText));\n      callback(data);\n    }\n  }\n  if (coords) {\n    xml.open('GET', '/api/weather/coords/' + JSON.stringify(location), true);\n  }else{\n    xml.open('GET', '/api/weather/address/' + location, true);\n  }\n  xml.send(null);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}